' Copyright (c) 2025 Franz Steinkress
' Licensed under the MIT License - see LICENSE for details
@startuml
skinparam linetype ortho
skinparam classBackgroundColor #B2C9AB

interface Mediator {
    + {abstract} send(message: const std::string&, 
      sender: class Colleague*): void
}
abstract class Colleague {
    # mediator: Mediator*
    + setMediator(mediator: Mediator*): void
    + {abstract} receive(message: const std::string&): void
}
class ConcreteColleagueA {
    + send(message: 
      const std::string&): void
    + receive(message: 
      const std::string&): void
}
class ConcreteColleagueB {
    + send(message: 
      const std::string&): void
    + receive(message: 
      const std::string&): void
}
class ConcreteMediator {
    - colleagueA: ConcreteColleagueA*
    - colleagueB: ConcreteColleagueB*
    + setColleagueA(colleagueA: 
      Colleague*): void
    + setColleagueB(colleagueB: 
      Colleague*): void
    + send(message: const std::string&, 
      sender: Colleague*): void
}
class Client {
    + main(): int
}

Mediator <|.. ConcreteMediator
Colleague <|-- ConcreteColleagueA
Colleague <|-- ConcreteColleagueB
Colleague -left-> Mediator
ConcreteMediator -right-> ConcreteColleagueA
ConcreteMediator -right-> ConcreteColleagueB
ConcreteColleagueA -[hidden]right-> ConcreteColleagueB
Client ..> Mediator
Client ..> Colleague
@enduml
